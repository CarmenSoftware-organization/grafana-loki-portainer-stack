# Portainer Stack Configuration
# คัดลอกเนื้อหานี้ไปใส่ใน Portainer Web Editor
# Updated to match docker-compose.yml with environment variables and all services

version: '3.8'

services:
  # Loki - Log Aggregation System
  loki:
    image: grafana/loki:latest
    container_name: loki
    ports:
      - "${LOKI_PORT}:3100"
    volumes:
      - loki-data:/loki
      - ${LOKI_DATA_PATH}:/loki
    networks:
      - ${NETWORK_NAME}
    restart: unless-stopped

  # Promtail - Log Collector (Minimal)
  promtail:
    image: grafana/promtail:latest
    container_name: promtail
    volumes:
      - /var/log:/var/log:ro
      - /var/lib/docker/containers:/var/lib/docker/containers:ro
      - /var/run/docker.sock:/var/run/docker.sock:ro
    networks:
      - ${NETWORK_NAME}
    restart: unless-stopped
    depends_on:
      - loki
      - sentry

  # Grafana - Visualization & Dashboard
  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    ports:
      - "${GRAFANA_PORT}:3000"
    volumes:
      - grafana-data:/var/lib/grafana
      - ${GRAFANA_DATA_PATH}:/var/lib/grafana
    environment:
      - GF_SECURITY_ADMIN_USER=${GRAFANA_ADMIN_USER}
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_ADMIN_PASSWORD}
      - GF_USERS_ALLOW_SIGN_UP=false
    networks:
      - ${NETWORK_NAME}
    restart: unless-stopped
    depends_on:
      - loki

  # ---------- Sentry Dependencies ----------
  postgres:
    image: postgres:14
    container_name: sentry_postgres
    restart: always
    environment:
      POSTGRES_USER: sentry
      POSTGRES_PASSWORD: sentry
      POSTGRES_DB: sentry
    volumes:
      - sentry_postgres:/var/lib/postgresql/data
    networks:
      - ${NETWORK_NAME}

  redis:
    image: redis:7
    container_name: sentry_redis
    restart: always
    volumes:
      - sentry_redis:/data
    networks:
      - ${NETWORK_NAME}

  zookeeper:
    image: confluentinc/cp-zookeeper:7.6.0
    container_name: sentry_zookeeper
    restart: always
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
    networks:
      - ${NETWORK_NAME}

  kafka:
    image: confluentinc/cp-kafka:7.6.0
    container_name: sentry_kafka
    restart: always
    depends_on:
      - zookeeper
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    networks:
      - ${NETWORK_NAME}

  # ---------- Sentry Core ----------
  sentry:
    image: getsentry/sentry:latest
    container_name: sentry_web
    restart: always
    depends_on:
      - postgres
      - redis
      - kafka
    environment:
      SENTRY_SECRET_KEY: "${SENTRY_SECRET_KEY}"
      SENTRY_POSTGRES_HOST: postgres
      SENTRY_DB_USER: sentry
      SENTRY_DB_PASSWORD: sentry
      SENTRY_DB_NAME: sentry
      SENTRY_REDIS_HOST: redis
      SENTRY_KAFKA_HOSTS: kafka:9092
    ports:
      - "${SENTRY_PORT}:9000"
    networks:
      - ${NETWORK_NAME}

  worker:
    image: getsentry/sentry:latest
    container_name: sentry_worker
    restart: always
    depends_on:
      - sentry
    command: run worker
    environment:
      SENTRY_SECRET_KEY: "${SENTRY_SECRET_KEY}"
      SENTRY_POSTGRES_HOST: postgres
      SENTRY_DB_USER: sentry
      SENTRY_DB_PASSWORD: sentry
      SENTRY_DB_NAME: sentry
      SENTRY_REDIS_HOST: redis
      SENTRY_KAFKA_HOSTS: kafka:9092
    networks:
      - ${NETWORK_NAME}

  cron:
    image: getsentry/sentry:latest
    container_name: sentry_cron
    restart: always
    depends_on:
      - sentry
    command: run cron
    environment:
      SENTRY_SECRET_KEY: "${SENTRY_SECRET_KEY}"
      SENTRY_POSTGRES_HOST: postgres
      SENTRY_DB_USER: sentry
      SENTRY_DB_PASSWORD: sentry
      SENTRY_DB_NAME: sentry
      SENTRY_REDIS_HOST: redis
      SENTRY_KAFKA_HOSTS: kafka:9092
    networks:
      - ${NETWORK_NAME}

# ---------- Networks & Volumes ----------
networks:
  ${NETWORK_NAME}:
    driver: bridge

volumes:
  loki-data:
  grafana-data:
  sentry_postgres:
  sentry_redis:
