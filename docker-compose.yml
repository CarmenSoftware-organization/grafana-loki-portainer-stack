services:
  # Loki - Log Aggregation System
  loki:
    image: grafana/loki:latest
    container_name: loki
    ports:
      - "${LOKI_PORT:-3998}:3100"
    volumes:
      - loki-data:/loki
    networks:
      - default
    restart: unless-stopped

  # Promtail - Log Collector (Minimal)
  promtail:
    image: grafana/promtail:latest
    container_name: promtail
    volumes:
      # - ./configs/promtail-config.yml:/etc/promtail/config.yml
      - /var/log:/var/log:ro
      - /var/lib/docker/containers:/var/lib/docker/containers:ro
      - /var/run/docker.sock:/var/run/docker.sock:ro
    # command: -config.file=/etc/promtail/config.yml
    networks:
      - default
    restart: unless-stopped
    depends_on:
      - loki
      - sentry

  # Grafana - Visualization & Dashboard
  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    ports:
      - "${GRAFANA_PORT:-3999}:3000"
    volumes:
      - grafana-data:/var/lib/grafana
    environment:
      - GF_SECURITY_ADMIN_USER=${GRAFANA_ADMIN_USER:-admin}
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_ADMIN_PASSWORD:-admin123}
      - GF_USERS_ALLOW_SIGN_UP=false
    networks:
      - default
    restart: unless-stopped
    depends_on:
      - loki

  # ---------- Sentry Dependencies ----------
  postgres:
    image: postgres:latest
    container_name: sentry_postgres
    restart: always
    environment:
      POSTGRES_USER: sentry
      POSTGRES_PASSWORD: sentry
      POSTGRES_DB: sentry
    volumes:
      - sentry_postgres:/var/lib/postgresql/data
    networks:
      - default

  redis:
    image: redis:latest
    container_name: sentry_redis
    restart: always
    volumes:
      - sentry_redis:/data
    networks:
      - default

  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    container_name: sentry_zookeeper
    restart: always
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
    networks:
      - default

  kafka:
    image: confluentinc/cp-kafka:latest
    container_name: sentry_kafka
    restart: always
    depends_on:
      - zookeeper
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    networks:
      - default

  # ---------- Sentry Core ----------
  sentry:
    image: getsentry/sentry:latest
    container_name: sentry_web
    restart: always
    depends_on:
      - postgres
      - redis
      - kafka
    environment:
      SENTRY_SECRET_KEY: "${SENTRY_SECRET_KEY:-ac1cd0f73997c89d45917853f4a7fed43c0d7c4f2b795ec89225dc8eb7c1b5b6}"
      SENTRY_POSTGRES_HOST: postgres
      SENTRY_DB_USER: sentry
      SENTRY_DB_PASSWORD: sentry
      SENTRY_DB_NAME: sentry
      SENTRY_REDIS_HOST: redis
      SENTRY_KAFKA_HOSTS: kafka:9092
    ports:
      - "${SENTRY_PORT:-3997}:9000"
    networks:
      - default

  worker:
    image: getsentry/sentry:latest
    container_name: sentry_worker
    restart: always
    depends_on:
      - sentry
    command: run worker
    environment:
      SENTRY_SECRET_KEY: "${SENTRY_SECRET_KEY:-ac1cd0f73997c89d45917853f4a7fed43c0d7c4f2b795ec89225dc8eb7c1b5b6}"
      SENTRY_POSTGRES_HOST: postgres
      SENTRY_DB_USER: sentry
      SENTRY_DB_PASSWORD: sentry
      SENTRY_DB_NAME: sentry
      SENTRY_REDIS_HOST: redis
      SENTRY_KAFKA_HOSTS: kafka:9092
    networks:
      - default

  cron:
    image: getsentry/sentry:latest
    container_name: sentry_cron
    restart: always
    depends_on:
      - sentry
    command: run cron
    environment:
      SENTRY_SECRET_KEY: "${SENTRY_SECRET_KEY:-ac1cd0f73997c89d45917853f4a7fed43c0d7c4f2b795ec89225dc8eb7c1b5b6}"
      SENTRY_POSTGRES_HOST: postgres
      SENTRY_DB_USER: sentry
      SENTRY_DB_PASSWORD: sentry
      SENTRY_DB_NAME: sentry
      SENTRY_REDIS_HOST: redis
      SENTRY_KAFKA_HOSTS: kafka:9092
    networks:
      - default

# ---------- Networks & Volumes ----------
networks:
  default:
    driver: bridge
    name: ${NETWORK_NAME:-grafana-stack}

volumes:
  loki-data:
  grafana-data:
  sentry_postgres:
  sentry_redis:
